// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Udap.Server.DbContexts;

#nullable disable

namespace UdapDb.Postgres.Migrations.UdapDb
{
    [DbContext(typeof(UdapDbContext))]
    partial class UdapDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("udap")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("absolute_refresh_token_lifetime");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_lifetime");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_type");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_access_tokens_via_browser");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_offline_access");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_plain_text_pkce");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_remember_consent");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasColumnType("text")
                        .HasColumnName("allowed_identity_token_signing_algorithms");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("boolean")
                        .HasColumnName("always_include_user_claims_in_id_token");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("boolean")
                        .HasColumnName("always_send_client_claims");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("authorization_code_lifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("back_channel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("text")
                        .HasColumnName("back_channel_logout_uri");

                    b.Property<int?>("CibaLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("ciba_lifetime");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasColumnType("text")
                        .HasColumnName("client_claims_prefix");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUri")
                        .HasColumnType("text")
                        .HasColumnName("client_uri");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("consent_lifetime");

                    b.Property<bool?>("CoordinateLifetimeWithUserSession")
                        .HasColumnType("boolean")
                        .HasColumnName("coordinate_lifetime_with_user_session");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<TimeSpan>("DPoPClockSkew")
                        .HasColumnType("interval")
                        .HasColumnName("dpo_pclock_skew");

                    b.Property<int>("DPoPValidationMode")
                        .HasColumnType("integer")
                        .HasColumnName("dpo_pvalidation_mode");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("device_code_lifetime");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_local_login");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("front_channel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("text")
                        .HasColumnName("front_channel_logout_uri");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("identity_token_lifetime");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("boolean")
                        .HasColumnName("include_jwt_id");

                    b.Property<string>("InitiateLoginUri")
                        .HasColumnType("text")
                        .HasColumnName("initiate_login_uri");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed");

                    b.Property<string>("LogoUri")
                        .HasColumnType("text")
                        .HasColumnName("logo_uri");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnType("text")
                        .HasColumnName("pair_wise_subject_salt");

                    b.Property<int?>("PollingInterval")
                        .HasColumnType("integer")
                        .HasColumnName("polling_interval");

                    b.Property<string>("ProtocolType")
                        .HasColumnType("text")
                        .HasColumnName("protocol_type");

                    b.Property<int?>("PushedAuthorizationLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("pushed_authorization_lifetime");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_usage");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("require_client_secret");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("require_consent");

                    b.Property<bool>("RequireDPoP")
                        .HasColumnType("boolean")
                        .HasColumnName("require_dpo_p");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("boolean")
                        .HasColumnName("require_pkce");

                    b.Property<bool>("RequirePushedAuthorization")
                        .HasColumnType("boolean")
                        .HasColumnName("require_pushed_authorization");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("boolean")
                        .HasColumnName("require_request_object");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("sliding_refresh_token_lifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("boolean")
                        .HasColumnName("update_access_token_claims_on_refresh");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserCodeType")
                        .HasColumnType("text")
                        .HasColumnName("user_code_type");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("user_sso_lifetime");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_claims");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_claims_client_id");

                    b.ToTable("client_claims", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.HasKey("Id")
                        .HasName("pk_client_cors_origins");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_cors_origins_client_id");

                    b.ToTable("client_cors_origins", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("GrantType")
                        .HasColumnType("text")
                        .HasColumnName("grant_type");

                    b.HasKey("Id")
                        .HasName("pk_client_grant_types");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_grant_types_client_id");

                    b.ToTable("client_grant_types", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Provider")
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.HasKey("Id")
                        .HasName("pk_client_id_prestrictions");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_id_prestrictions_client_id");

                    b.ToTable("client_id_prestrictions", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnType("text")
                        .HasColumnName("post_logout_redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_client_post_logout_redirect_uris");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_post_logout_redirect_uris_client_id");

                    b.ToTable("client_post_logout_redirect_uris", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_properties");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_properties_client_id");

                    b.ToTable("client_properties", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("text")
                        .HasColumnName("redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_client_redirect_uris");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_redirect_uris_client_id");

                    b.ToTable("client_redirect_uris", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasColumnName("scope");

                    b.HasKey("Id")
                        .HasName("pk_client_scopes");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_scopes_client_id");

                    b.ToTable("client_scopes", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_secrets");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_secrets_client_id");

                    b.ToTable("client_secrets", "udap", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.Anchor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("begin_date");

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer")
                        .HasColumnName("community_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbprint");

                    b.Property<string>("X509Certificate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x509_certificate");

                    b.HasKey("Id")
                        .HasName("pk_udap_anchors");

                    b.HasIndex("CommunityId")
                        .HasDatabaseName("ix_udap_anchors_community_id");

                    b.ToTable("udap_anchors", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.AnchorCertification", b =>
                {
                    b.Property<int>("AnchorId")
                        .HasColumnType("integer")
                        .HasColumnName("anchor_id");

                    b.Property<int>("CertificationId")
                        .HasColumnType("integer")
                        .HasColumnName("certification_id");

                    b.HasKey("AnchorId", "CertificationId")
                        .HasName("pk_udap_anchor_certification");

                    b.HasIndex("CertificationId")
                        .HasDatabaseName("ix_udap_anchor_certification_certification_id");

                    b.ToTable("udap_anchor_certification", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommunityId")
                        .HasColumnType("integer")
                        .HasColumnName("community_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_udap_certifications");

                    b.HasIndex("CommunityId")
                        .HasDatabaseName("ix_udap_certifications_community_id");

                    b.ToTable("udap_certifications", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_udap_communities");

                    b.ToTable("udap_communities", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.CommunityCertification", b =>
                {
                    b.Property<int>("CommunityId")
                        .HasColumnType("integer")
                        .HasColumnName("community_id");

                    b.Property<int>("CertificationId")
                        .HasColumnType("integer")
                        .HasColumnName("certification_id");

                    b.HasKey("CommunityId", "CertificationId")
                        .HasName("pk_udap_community_certification");

                    b.HasIndex("CertificationId")
                        .HasDatabaseName("ix_udap_community_certification_certification_id");

                    b.ToTable("udap_community_certification", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.Intermediate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnchorId")
                        .HasColumnType("integer")
                        .HasColumnName("anchor_id");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("begin_date");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbprint");

                    b.Property<string>("X509Certificate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("x509_certificate");

                    b.HasKey("Id")
                        .HasName("pk_udap_intermediate_certificates");

                    b.HasIndex("AnchorId")
                        .HasDatabaseName("ix_udap_intermediate_certificates_anchor_id");

                    b.ToTable("udap_intermediate_certificates", "udap");
                });

            modelBuilder.Entity("Udap.Server.Entities.TieredClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUriSan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_uri_san");

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer")
                        .HasColumnName("community_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("IdPBaseUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_pbase_url");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("redirect_uri");

                    b.Property<string>("TokenEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_endpoint");

                    b.HasKey("Id")
                        .HasName("pk_tiered_clients");

                    b.ToTable("tiered_clients", "udap");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_claims_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_cors_origins_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_grant_types_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_id_prestrictions_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_post_logout_redirect_uris_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_properties_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_redirect_uris_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_scopes_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("Duende.IdentityServer.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_secrets_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Udap.Server.Entities.Anchor", b =>
                {
                    b.HasOne("Udap.Server.Entities.Community", "Community")
                        .WithMany("Anchors")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_anchor_communities");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Udap.Server.Entities.AnchorCertification", b =>
                {
                    b.HasOne("Udap.Server.Entities.Anchor", "Anchor")
                        .WithMany("AnchorCertifications")
                        .HasForeignKey("AnchorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_anchor_certification_anchor");

                    b.HasOne("Udap.Server.Entities.Certification", "Certification")
                        .WithMany("AnchorCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_anchor_certification_certification");

                    b.Navigation("Anchor");

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("Udap.Server.Entities.Certification", b =>
                {
                    b.HasOne("Udap.Server.Entities.Community", null)
                        .WithMany("Certifications")
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("fk_udap_certifications_udap_communities_community_id");
                });

            modelBuilder.Entity("Udap.Server.Entities.CommunityCertification", b =>
                {
                    b.HasOne("Udap.Server.Entities.Certification", "Certification")
                        .WithMany("CommunityCertifications")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_community_certification_certification");

                    b.HasOne("Udap.Server.Entities.Community", "Community")
                        .WithMany("CommunityCertifications")
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("fk_community_certification_community");

                    b.Navigation("Certification");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Udap.Server.Entities.Intermediate", b =>
                {
                    b.HasOne("Udap.Server.Entities.Anchor", "Anchor")
                        .WithMany("Intermediates")
                        .HasForeignKey("AnchorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_intermediate_certificate_anchor");

                    b.Navigation("Anchor");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("Udap.Server.Entities.Anchor", b =>
                {
                    b.Navigation("AnchorCertifications");

                    b.Navigation("Intermediates");
                });

            modelBuilder.Entity("Udap.Server.Entities.Certification", b =>
                {
                    b.Navigation("AnchorCertifications");

                    b.Navigation("CommunityCertifications");
                });

            modelBuilder.Entity("Udap.Server.Entities.Community", b =>
                {
                    b.Navigation("Anchors");

                    b.Navigation("Certifications");

                    b.Navigation("CommunityCertifications");
                });
#pragma warning restore 612, 618
        }
    }
}
